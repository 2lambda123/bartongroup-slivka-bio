#!/bin/bash
### BEGIN INIT INFO
# Provides:          slivka
# Required-Start:
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: slivka
# Description:       slivka
### END INIT INFO


# This script should be run as a dedicated slivka user e.g. www-slivka
# Example init.d script may be
#
# #!/bin/bash
#
# USER=www-slivka
# if [ -z $1 ]; then
#   echo "usage: $0 [start|stop|restart]"
#   exit 2
# else
#   su $USER /home/$USER/slivka-bio/slivkad $1
#   exit $?
# fi
#


PROJECT_DIR="${HOME}/slivka-bio"
[ -d ${PROJECT_DIR} ] || (echo "Project directory doesn't exist"; exit 3)
PID_PATH="${HOME}/run"
[ -d ${PID_PATH} ] || mkdir ${PID_PATH} || exit 3


function start {
    case $1 in
        server)
            local PID_FILE="$PID_PATH/slivka-server.pid";;
        scheduler)
            local PID_FILE="$PID_PATH/slivka-scheduler.pid";;
        worker)
            local PID_FILE="$PID_PATH/slivka-workers.pid";;
        all|"")
            start "server"
            start "scheduler"
            start "local-queue"
            return 0;;
        *)
            echo "Invalid parameter \"$1\"; use: $0 start {server|scheduler|local-queue|all}."
            return 1
    esac
    if [ -e ${PID_FILE} ] && kill -0 $(cat ${PID_FILE}); then
        echo "Slivka $1 already running."
        return 2
    fi
    echo "Starting Slivka $1"
    pushd ${PROJECT_DIR} > /dev/null
    case $1 in
        server)
            gunicorn -w 2 -b 127.0.0.1:8000 -p ${PID_FILE} wsgi:app &;;
        scheduler)
            python manage.py scheduler &
            echo $! > ${PID_FILE};;
        local-queue)
            python manage.py local-queue &
            echo $! > ${PID_FILE};;
    esac
    popd > /dev/null
    echo "Slivka $1 Started"
    return 0
}


function stop {
    case $1 in
        server)
            local PID_FILE="$PID_PATH/slivka-server.pid";;
        scheduler)
            local PID_FILE="$PID_PATH/slivka-scheduler.pid";;
        worker)
            local PID_FILE="$PID_PATH/slivka-workers.pid";;
        all|"")
            stop "server"
            stop "scheduler"
            stop "local-queue"
            return 0;;
        *)
            echo "Invalid parameter \"$1\"; use: $0 stop {server|scheduler|local-queue|all}."
            return 1
    esac
    if [ ! -e ${PID_FILE} ] || ! kill -0 $(cat ${PID_FILE}); then
        echo "Slivka $1 is not running."
        return 2
    fi
    local PID=$(cat ${PID_FILE})
    kill -15 ${PID} 2> /dev/null
    local COUNT=0
    echo -ne "Stopping $1"
    while kill -0 ${PID} 2> /dev/null && [ ${COUNT} -le 10 ]; do
        sleep 0.5
        COUNT=$[$COUNT+1]
        echo -ne "."
    done
    echo
    if kill -0 ${PID} 2> /dev/null; then
        echo "Slivka $1 is still running with PID=$PID"
    else
        rm ${PID_FILE}
        echo "Slivka $1 stopped successfully"
    fi
    return 0
}



case $1 in
start)
    conda activate slivka || exit 3
    start $2 ;;
stop) stop $2;;
restart)
    stop $2
    conda activate slivka || exit 3
    start $2 ;;
*)
    echo "Invalid parameter \"$1\"; use: $0 {start|stop|restart} {server|scheduler|local-queue|all}"
    exit 1
esac
exit $?
